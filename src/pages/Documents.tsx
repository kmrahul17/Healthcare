import { useState } from "react";
import { Download, Search, Filter, FileText } from "lucide-react";
import Layout from "@/components/Layout";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { format } from "date-fns";
import { jsPDF } from "jspdf";

interface Document {
  id: string;
  title: string;
  type: "report" | "prescription" | "test_result" | "certificate" | "other";
  date: string;
  description: string;
  fileUrl: string;
  patientName?: string;
  doctorName?: string;
  diagnosis?: string;
  recommendations?: string;
}

const mockDocuments: Document[] = [
  {
    id: "1",
    title: "Blood Test Results",
    type: "test_result",
    date: "2025-02-20",
    description: "Complete blood count and metabolic panel results",
    fileUrl: "/documents/blood-test-results.pdf"
  },
  {
    id: "2",
    title: "Prescription Record",
    type: "prescription",
    date: "2025-02-15",
    description: "Antibiotic prescription from Dr. Johnson",
    fileUrl: "/documents/prescription.pdf"
  },
  {
    id: "3",
    title: "Medical Certificate",
    type: "certificate",
    date: "2025-02-21",
    description: "Medical certificate for sick leave",
    fileUrl: "/documents/medical-certificate.pdf",
    patientName: "John Doe",
    doctorName: "Dr. Sarah Johnson",
    diagnosis: "Acute Upper Respiratory Infection",
    recommendations: "Rest for 3 days and avoid strenuous activities"
  }
];

const Documents = () => {
  const [documents] = useState<Document[]>(mockDocuments);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedType, setSelectedType] = useState<string>("all");

  const filteredDocuments = documents.filter(doc => {
    const matchesSearch = doc.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         doc.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesType = selectedType === "all" || doc.type === selectedType;
    return matchesSearch && matchesType;
  });

  const downloadMedicalCertificate = (doc: Document) => {
    const pdf = new jsPDF();
    
    // Add header with hospital/clinic name
    pdf.setFontSize(24);
    pdf.setFont("helvetica", "bold");
    pdf.text("Health Records Management System", 20, 20, { align: "left" });
    
    // Add title
    pdf.setFontSize(20);
    pdf.text("MEDICAL CERTIFICATE", pdf.internal.pageSize.width / 2, 40, { align: "center" });
    
    // Add content
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    
    const content = [
      `Date: ${format(new Date(doc.date), 'MMMM d, yyyy')}`,
      "",
      "This is to certify that:",
      "",
      `Patient Name: ${doc.patientName}`,
      `Has been examined and diagnosed with: ${doc.diagnosis}`,
      "",
      "Medical Recommendations:",
      doc.recommendations || "No specific recommendations",
      "",
      "",
      "Issued by:",
      "",
      doc.doctorName || "Unknown Doctor",
      "Licensed Medical Practitioner"
    ];

    let yPos = 60;
    content.forEach(line => {
      pdf.text(line, 20, yPos);
      yPos += 10;
    });

    // Add signature placeholder
    pdf.setDrawColor(0);
    pdf.line(20, yPos + 10, 80, yPos + 10);
    
    // Add footer
    pdf.setFontSize(10);
    pdf.text(
      'This is an official medical certificate from Health Records Management System',
      20,
      pdf.internal.pageSize.height - 10
    );
    
    pdf.save(`medical-certificate-${doc.patientName?.toLowerCase().replace(/\s+/g, '-')}.pdf`);
  };

  const downloadDocument = (doc: Document) => {
    if (doc.type === 'certificate') {
      return downloadMedicalCertificate(doc);
    }

    const pdf = new jsPDF();
    
    pdf.setFontSize(20);
    pdf.setFont("helvetica", "bold");
    pdf.text(doc.title, 20, 20);
    
    pdf.setFontSize(12);
    pdf.setFont("helvetica", "normal");
    pdf.text(`Date: ${format(new Date(doc.date), 'MMMM d, yyyy')}`, 20, 40);
    pdf.text(`Type: ${doc.type.replace('_', ' ').toUpperCase()}`, 20, 50);
    
    const splitDescription = pdf.splitTextToSize(
      `Description: ${doc.description}`, 
      180
    );
    pdf.text(splitDescription, 20, 60);
    
    pdf.setFontSize(10);
    pdf.text(
      'Generated by Health Records Management System', 
      20, 
      pdf.internal.pageSize.height - 10
    );
    
    pdf.save(`${doc.title.toLowerCase().replace(/\s+/g, '-')}.pdf`);
  };

  return (
    <Layout>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold">Documents</h1>
          <Button>
            <FileText className="mr-2 h-4 w-4" />
            Upload Document
          </Button>
        </div>

        <div className="flex gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search documents..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <select
            className="rounded-md border border-input px-3 py-2"
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value)}
          >
            <option value="all">All Types</option>
            <option value="report">Reports</option>
            <option value="prescription">Prescriptions</option>
            <option value="test_result">Test Results</option>
            <option value="certificate">Medical Certificates</option>
            <option value="other">Other</option>
          </select>
        </div>

        <div className="grid gap-4">
          {filteredDocuments.map((doc) => (
            <Card key={doc.id}>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>{doc.title}</span>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => downloadDocument(doc)}
                  >
                    <Download className="mr-2 h-4 w-4" />
                    Download PDF
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="text-sm text-muted-foreground">
                    {format(new Date(doc.date), 'MMMM d, yyyy')}
                  </div>
                  <div className="text-sm">{doc.description}</div>
                  {doc.type === 'certificate' && (
                    <div className="text-sm text-muted-foreground">
                      Patient: {doc.patientName} | Doctor: {doc.doctorName}
                    </div>
                  )}
                  <div>
                    <span className="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium bg-primary/10 text-primary">
                      {doc.type.replace('_', ' ').toUpperCase()}
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </Layout>
  );
};

export default Documents;